name: Build and Release

on:
    push:
        branches: [ master, main ]
    workflow_dispatch:

env:
    REGISTRY: ghcr.io
    IMAGE_NAME: "${{ github.repository }}"

jobs:
    pre-commit:
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                python-version: [ '3.10', '3.11' ]

        steps:
            -   uses: actions/checkout@v3

            -   name: Set up Python ${{ matrix.python-version }}
                uses: actions/setup-python@v4
                with:
                    python-version: ${{ matrix.python-version }}

            -   name: Run pre-commit
                uses: pre-commit/action@v3.0.0

    unit-tests:
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                python-version: [ '3.10', '3.11' ]

        services:
            postgres:
                image: postgres:15
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                    POSTGRES_DB: postgres
                ports: [ '5432:5432' ]
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

            redis:
                image: redis:6
                ports: [ '6379:6379' ]
                options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

        steps:
            -   uses: actions/checkout@v3

            -   name: Set up Python
                uses: actions/setup-python@v4
                with:
                    python-version: ${{ matrix.python-version }}

            -   name: Cache poetry
                uses: actions/cache@v3
                with:
                    path: |
                        ~/.cache/pypoetry
                        ~/.cache/pip
                    key: ${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

            -   name: Install dependencies
                run: |
                    python -m pip install --upgrade pip poetry coverage[toml]
                    poetry config virtualenvs.create false
                    poetry install --no-interaction

            -   name: Run tests
                run: python -m coverage run --branch --parallel-mode -m pytest

            -   name: Upload coverage data
                uses: actions/upload-artifact@v3
                with:
                    name: code_coverage
                    path: '.coverage.*'

            -   name: Generate coverage
                run: |
                    python -m coverage combine
                    python -m coverage html --skip-covered --skip-empty
                    python -m coverage report --fail-under=50

            -   name: Upload coverage
                uses: codecov/codecov-action@v3
                with:
                    token: ${{ secrets.CODECOV_TOKEN }}

    build:
        runs-on: ubuntu-latest
        needs: [ unit-tests ]
        steps:
            -   uses: actions/checkout@v3

            -   uses: docker/setup-buildx-action@v2

            -   name: Log in to the Container registry
                uses: docker/login-action@v2
                with:
                    registry: ${{ env.REGISTRY }}
                    username: ${{ github.actor }}
                    password: ${{ secrets.GITHUB_TOKEN }}

            -   name: Build and push Docker alph-pool image
                uses: docker/build-push-action@v3
                with:
                    context: .
                    push: true
                    cache-from: type=gha
                    cache-to: type=gha,mode=max
                    tags: |
                        ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
                        ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
                    labels: ${{ steps.meta.outputs.labels }}

    deploy:
        runs-on: ubuntu-latest
        needs: [ build ]
        if: "${{ github.ref_name }} == 'master'"
        steps:
            -   uses: actions/checkout@v3

            -   name: Setup Ansible
                uses: ./.github/actions/setup-ansible
                with:
                    ssh_private_key: '${{ secrets.ANSIBLE_SSH_PRIVATE_KEY }}'
                    vault_password: '${{ secrets.ANSIBLE_VAULT_PASSWORD }}'
                    hosts: '${{ secrets.ANSIBLE_HOSTS }}'

            -   name: Release application
                uses: ./.github/actions/release
                with:
                    docker_image: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}'
