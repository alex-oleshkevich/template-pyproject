version: '3.8'

networks:
    traefik:
        external: yes
    postgres:
        external: yes
    redis:
        external: yes

volumes:
    celery_beat:

secrets:
{% for secret in registered_secrets.results %}
    "{{ secret.secret_name }}":
        external: true
{% endfor %}

x-secrets: &secrets
{% for secret in registered_secrets.results %}
    -   source: "{{ secret.secret_name }}"
        target: /run/secrets/{{ secret.item.name }}.secret
{% endfor %}

x-common-variables: &envvars
{% for var_name, var_value in envvars.items() %}
    {{ var_name }}: "{{ var_value }}"
{% endfor %}

services:
    app:
        image: "{{ app_docker_image }}"
        networks: [default, traefik, postgres, redis]
        environment: *envvars
        secrets: *secrets
        healthcheck:
            test: [ 'CMD-SHELL', "/bin/healthcheck.py" ]
            interval: 10s
            timeout: 5s
            retries: 5
        deploy:
            labels:
                traefik.enable: 'true'
                traefik.http.routers.{{ project_slug }}.rule: "Host(`{{ app_domain }}`)"
                traefik.http.routers.{{ project_slug }}.tls.certResolver: letsencrypt
                traefik.http.services.{{ project_slug }}.loadBalancer.server.port: "8000"
            replicas: {{ app_replicas }}
            restart_policy:
                condition: on-failure
            update_config:
                delay: 10s
                order: start-first
            rollback_config:
                order: start-first
                delay: 10s

    celery_worker:
        image: "{{ app_docker_image }}"
        networks: [default, traefik, postgres, redis]
        command:
            - "celery"
            - "-A {{ project_slug }}.base worker"
            - "-l info"
        environment: *envvars
        secrets: *secrets
        deploy:
            replicas: {{ celery_worker_replicas }}
            restart_policy:
                condition: on-failure
            update_config:
                delay: 10s
                order: start-first
            rollback_config:
                order: start-first
                delay: 10s

    celery_beat:
        image: "{{ app_docker_image }}"
        networks: [default, redis]
        command:
            - "celery"
            - "-A {{ project_slug }}.base beat"
            - "-s /var/run/celery-beat/celerybeat-schedule.db"
            - "-l info"
        volumes:
            - celery_beat:/var/run/celery-beat
        environment: *envvars
        secrets: *secrets
        deploy:
            replicas: 1 # must be 1 per enrironment!
            restart_policy:
                condition: on-failure
            update_config:
                delay: 10s
                order: start-first
            rollback_config:
                order: start-first
                delay: 10s
#
#    redis:
#        image: "{{ redis_image }}"
#        healthcheck:
#            test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
#            interval: 10s
#            timeout: 5s
#            retries: 5
#        deploy:
#            mode: global
#            restart_policy:
#                condition: on-failure
#                delay: 5s
#                max_attempts: 10
#            update_config:
#                delay: 5s
#                order: stop-first
#            rollback_config:
#                order: stop-first
#                delay: 5s
